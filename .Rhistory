data <- data %>%
select(country, year, population, gdp, co2,
co2_per_capita, methane, methane_per_capita,
nitrous_oxide, nitrous_oxide_per_capita)
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules EXPORTS
data_exports <- read.csv(paste(base, "API_NE.EXP.GNFS.CD_DS2_en_csv_v2_3025.csv", sep  = "/"), sep  = ",", header = FALSE)
data_exports <- tail(data_exports, -2)
colnames(data_exports) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
exports <- data_exports[, c("country", 1960:2021)]
exports_long <- pivot_longer(exports, cols = -country, names_to = "year", values_to = "exports")
exports_long$year <- as.numeric(exports_long$year)
data <- merge(data, exports_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules GINI
data_gini <- read.csv(paste(base, "API_SI.POV.GINI_DS2_en_csv_v2_16.csv", sep  = "/"), sep = ",", header = FALSE)
data_gini <- tail(data_gini, -2)
head(data_gini)
colnames(data_gini) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
gini <- data_gini[, c("country", 1960:2021)]
gini_long <- pivot_longer(gini, cols = -country, names_to = "year", values_to = "gini")
gini_long$year <- as.numeric(gini_long$year)
data <- merge(data, gini_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules LIFE EXPECTANCY
data_lf <- read.csv(paste(base,"API_SP.DYN.LE00.IN_DS2_en_csv_v2_107.csv", sep = "/"), sep = ",", header = FALSE)
data_lf <- tail(data_lf, -2)
head(data_lf)
colnames(data_lf) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
lf <- data_lf[, c("country", 1960:2021)]
lf_long <- pivot_longer(lf, cols = -country, names_to = "year", values_to = "life_expectancy")
lf_long$year <- as.numeric(lf_long$year)
data <- merge(data, lf_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# Fusionar taules Superficie
data_sup <- read.csv(paste(base,"API_AG.SRF.TOTL.K2_DS2_en_csv_v2_485863.csv", sep = "/"), sep = ",", header = FALSE)
data_sup <- tail(data_sup, -2)
head(data_sup)
colnames(data_sup) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
sup <- data_sup[, c("country", 1960:2021)]
sup_long <- pivot_longer(sup, cols = -country, names_to = "year", values_to = "superficie")
sup_long$year <- as.numeric(sup_long$year)
data <- merge(data, sup_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
data[is.na(data)] <- 0
data$densitat_de_poblacio <- ifelse(data$superficie == 0, 0, data$population / data$superficie)
library(ggplot2)
library(plotly)
library(dplyr)
# Supongamos que tienes un conjunto de datos llamado 'data' con las columnas 'gdp', 'co2' y 'year'
# Define la lista de años únicos en tus datos
unique_years <- unique(data$year)
# Crea un widget de selección de año (menú desplegable)
year_selector <- list(
title = "Selecciona un año:",
type = "dropdown",
# Lista de opciones para el menú desplegable
buttons = lapply(unique_years, function(year) {
list(
label = year,
method = "update",
args = list(list(visible = data$year == year),
list(title = paste("Relación del PIB con la emisión de CO2 en", year)),
NULL)
)
})
)
# Filtra los datos para el año seleccionado inicialmente (por ejemplo, 2018)
initial_data <- data %>%
filter(year == 2018)
# Crea el gráfico base (sin datos)
gdp_plot <- ggplot() +
geom_point(aes(x = gdp, y = co2, text = country), data = initial_data) +
geom_smooth(aes(x = gdp, y = co2), data = initial_data, se = TRUE, color = "blue", fill = "blue") +
labs(title = "Relación del PIB con la emisión de CO2 en 2018", x = "PIB ($)", y = "CO2 (Kt)", text = "Country") +
# Establece los límites del eje y para evitar que cambien al cambiar el año
ylim(min(data$co2), max(data$co2))
# Convierte a gráfico interactivo
gdp_interactivo <- ggplotly(gdp_plot, tooltip = "text") %>%
# Agrega el menú desplegable para seleccionar el año
layout(updatemenus = list(year_selector))
gdp_interactivo
library(tidyverse)
library(mongolite)
library(ggplot2)
library(gganimate)
library(ggthemes)
# --------------------------------------------------------------------------------------------------------------------------------------------
# Read the CSV file
base <- "C:/Users/34619/Desktop/Enginyeria de Dades/3r/2n semestre/Visualització de Dades/Projecte VD/PROJECTE-VISUALITZACI-"
#base <- "/Users/marioamadorhurtado/Desktop/CARRERA/3r/2ns/VISUALITZACIÓ DE DADES/PROJECTE/PROJECTE-VISUALITZACI-"
#base <- "C:/Users/Usuario/OneDrive/Escriptori/UAB/3r/2nsemestre/visualització/PROJECTE-VISUALITZACI-"
setwd(base)
data <- read.csv(paste(base, "owid-co2-data.csv", sep = "/"))
# Select the important columns
data <- data %>%
select(country, year, population, gdp, co2,
co2_per_capita, methane, methane_per_capita,
nitrous_oxide, nitrous_oxide_per_capita)
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules EXPORTS
data_exports <- read.csv(paste(base, "API_NE.EXP.GNFS.CD_DS2_en_csv_v2_3025.csv", sep  = "/"), sep  = ",", header = FALSE)
data_exports <- tail(data_exports, -2)
colnames(data_exports) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
exports <- data_exports[, c("country", 1960:2021)]
exports_long <- pivot_longer(exports, cols = -country, names_to = "year", values_to = "exports")
exports_long$year <- as.numeric(exports_long$year)
data <- merge(data, exports_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules GINI
data_gini <- read.csv(paste(base, "API_SI.POV.GINI_DS2_en_csv_v2_16.csv", sep  = "/"), sep = ",", header = FALSE)
data_gini <- tail(data_gini, -2)
head(data_gini)
colnames(data_gini) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
gini <- data_gini[, c("country", 1960:2021)]
gini_long <- pivot_longer(gini, cols = -country, names_to = "year", values_to = "gini")
gini_long$year <- as.numeric(gini_long$year)
data <- merge(data, gini_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules LIFE EXPECTANCY
data_lf <- read.csv(paste(base,"API_SP.DYN.LE00.IN_DS2_en_csv_v2_107.csv", sep = "/"), sep = ",", header = FALSE)
data_lf <- tail(data_lf, -2)
head(data_lf)
colnames(data_lf) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
lf <- data_lf[, c("country", 1960:2021)]
lf_long <- pivot_longer(lf, cols = -country, names_to = "year", values_to = "life_expectancy")
lf_long$year <- as.numeric(lf_long$year)
data <- merge(data, lf_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# Fusionar taules Superficie
data_sup <- read.csv(paste(base,"API_AG.SRF.TOTL.K2_DS2_en_csv_v2_485863.csv", sep = "/"), sep = ",", header = FALSE)
data_sup <- tail(data_sup, -2)
head(data_sup)
colnames(data_sup) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
sup <- data_sup[, c("country", 1960:2021)]
sup_long <- pivot_longer(sup, cols = -country, names_to = "year", values_to = "superficie")
sup_long$year <- as.numeric(sup_long$year)
data <- merge(data, sup_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
data[is.na(data)] <- 0
data$densitat_de_poblacio <- ifelse(data$superficie == 0, 0, data$population / data$superficie)
library(ggplot2)
library(plotly)
library(dplyr)
# Supongamos que tienes un conjunto de datos llamado 'data' con las columnas 'gdp', 'co2' y 'year'
# Define la lista de años únicos en tus datos
unique_years <- unique(data$year)
# Crea un widget de selección de año (menú desplegable)
year_selector <- list(
title = "Selecciona un año:",
type = "dropdown",
# Lista de opciones para el menú desplegable
buttons = lapply(unique_years, function(year) {
list(
label = year,
method = "update",
args = list(list(visible = data$year == year),
list(title = paste("Relación del PIB con la emisión de CO2 en", year)),
NULL)
)
})
)
# Crea el gráfico base (sin datos)
gdp_plot <- ggplot() +
geom_point(aes(x = gdp, y = co2, text = country), data = initial_data) +
geom_smooth(aes(x = gdp, y = co2), data = initial_data, se = TRUE, color = "blue", fill = "blue") +
labs(title = "Relación del PIB con la emisión de CO2 en 2018", x = "PIB ($)", y = "CO2 (Kt)", text = "Country") +
# Establece los límites del eje y para evitar que cambien al cambiar el año
ylim(min(data$co2), max(data$co2))
# Convierte a gráfico interactivo
gdp_interactivo <- ggplotly(gdp_plot, tooltip = "text") %>%
# Agrega el menú desplegable para seleccionar el año
layout(updatemenus = list(year_selector))
gdp_interactivo
library(tidyverse)
library(mongolite)
library(ggplot2)
library(gganimate)
library(ggthemes)
# --------------------------------------------------------------------------------------------------------------------------------------------
# Read the CSV file
base <- "C:/Users/34619/Desktop/Enginyeria de Dades/3r/2n semestre/Visualització de Dades/Projecte VD/PROJECTE-VISUALITZACI-"
#base <- "/Users/marioamadorhurtado/Desktop/CARRERA/3r/2ns/VISUALITZACIÓ DE DADES/PROJECTE/PROJECTE-VISUALITZACI-"
#base <- "C:/Users/Usuario/OneDrive/Escriptori/UAB/3r/2nsemestre/visualització/PROJECTE-VISUALITZACI-"
setwd(base)
data <- read.csv(paste(base, "owid-co2-data.csv", sep = "/"))
# Select the important columns
data <- data %>%
select(country, year, population, gdp, co2,
co2_per_capita, methane, methane_per_capita,
nitrous_oxide, nitrous_oxide_per_capita)
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules EXPORTS
data_exports <- read.csv(paste(base, "API_NE.EXP.GNFS.CD_DS2_en_csv_v2_3025.csv", sep  = "/"), sep  = ",", header = FALSE)
data_exports <- tail(data_exports, -2)
colnames(data_exports) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
exports <- data_exports[, c("country", 1960:2021)]
exports_long <- pivot_longer(exports, cols = -country, names_to = "year", values_to = "exports")
exports_long$year <- as.numeric(exports_long$year)
data <- merge(data, exports_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules GINI
data_gini <- read.csv(paste(base, "API_SI.POV.GINI_DS2_en_csv_v2_16.csv", sep  = "/"), sep = ",", header = FALSE)
data_gini <- tail(data_gini, -2)
head(data_gini)
colnames(data_gini) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
gini <- data_gini[, c("country", 1960:2021)]
gini_long <- pivot_longer(gini, cols = -country, names_to = "year", values_to = "gini")
gini_long$year <- as.numeric(gini_long$year)
data <- merge(data, gini_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules LIFE EXPECTANCY
data_lf <- read.csv(paste(base,"API_SP.DYN.LE00.IN_DS2_en_csv_v2_107.csv", sep = "/"), sep = ",", header = FALSE)
data_lf <- tail(data_lf, -2)
head(data_lf)
colnames(data_lf) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
lf <- data_lf[, c("country", 1960:2021)]
lf_long <- pivot_longer(lf, cols = -country, names_to = "year", values_to = "life_expectancy")
lf_long$year <- as.numeric(lf_long$year)
data <- merge(data, lf_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# Fusionar taules Superficie
data_sup <- read.csv(paste(base,"API_AG.SRF.TOTL.K2_DS2_en_csv_v2_485863.csv", sep = "/"), sep = ",", header = FALSE)
data_sup <- tail(data_sup, -2)
head(data_sup)
colnames(data_sup) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
sup <- data_sup[, c("country", 1960:2021)]
sup_long <- pivot_longer(sup, cols = -country, names_to = "year", values_to = "superficie")
sup_long$year <- as.numeric(sup_long$year)
data <- merge(data, sup_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
data[is.na(data)] <- 0
data$densitat_de_poblacio <- ifelse(data$superficie == 0, 0, data$population / data$superficie)
data_gdp <- data %>%
filter(gdp != 0 & gdp < 3e+13 & co2 != 0)
# Función para generar el gráfico para un año específico
generate_plot <- function(year_selected) {
data_selected <- data_gdp %>%
filter(year == year_selected)
gdp_plot <- ggplot(data_selected, aes(x = gdp, y = co2)) +
geom_point(aes(text = country)) +
geom_smooth(se = TRUE, color = "blue", fill = "blue") +
labs(title = paste("Relació del PIB amb l'emissió de CO2 al", year_selected),
x = "PIB ($)", y = "CO2 (Kt)", text = "Country")
return(gdp_plot)
}
# Lista de años únicos en los datos
years <- unique(data_gdp$year)
# Construye un gráfico interactivo con menú desplegable para elegir el año
gdp_interactivo <- plot_ly()
for (year_selected in years) {
gdp_plot <- generate_plot(year_selected)
gdp_interactivo <- subplot(gdp_interactivo, ggplotly(gdp_plot, tooltip = "text"), nrows = length(years), margin = 0)
}
library(tidyverse)
library(mongolite)
library(ggplot2)
library(gganimate)
library(ggthemes)
# --------------------------------------------------------------------------------------------------------------------------------------------
# Read the CSV file
base <- "C:/Users/34619/Desktop/Enginyeria de Dades/3r/2n semestre/Visualització de Dades/Projecte VD/PROJECTE-VISUALITZACI-"
#base <- "/Users/marioamadorhurtado/Desktop/CARRERA/3r/2ns/VISUALITZACIÓ DE DADES/PROJECTE/PROJECTE-VISUALITZACI-"
#base <- "C:/Users/Usuario/OneDrive/Escriptori/UAB/3r/2nsemestre/visualització/PROJECTE-VISUALITZACI-"
setwd(base)
data <- read.csv(paste(base, "owid-co2-data.csv", sep = "/"))
# Select the important columns
data <- data %>%
select(country, year, population, gdp, co2,
co2_per_capita, methane, methane_per_capita,
nitrous_oxide, nitrous_oxide_per_capita)
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules EXPORTS
data_exports <- read.csv(paste(base, "API_NE.EXP.GNFS.CD_DS2_en_csv_v2_3025.csv", sep  = "/"), sep  = ",", header = FALSE)
data_exports <- tail(data_exports, -2)
colnames(data_exports) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
exports <- data_exports[, c("country", 1960:2021)]
exports_long <- pivot_longer(exports, cols = -country, names_to = "year", values_to = "exports")
exports_long$year <- as.numeric(exports_long$year)
data <- merge(data, exports_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules GINI
data_gini <- read.csv(paste(base, "API_SI.POV.GINI_DS2_en_csv_v2_16.csv", sep  = "/"), sep = ",", header = FALSE)
data_gini <- tail(data_gini, -2)
head(data_gini)
colnames(data_gini) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
gini <- data_gini[, c("country", 1960:2021)]
gini_long <- pivot_longer(gini, cols = -country, names_to = "year", values_to = "gini")
gini_long$year <- as.numeric(gini_long$year)
data <- merge(data, gini_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules LIFE EXPECTANCY
data_lf <- read.csv(paste(base,"API_SP.DYN.LE00.IN_DS2_en_csv_v2_107.csv", sep = "/"), sep = ",", header = FALSE)
data_lf <- tail(data_lf, -2)
head(data_lf)
colnames(data_lf) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
lf <- data_lf[, c("country", 1960:2021)]
lf_long <- pivot_longer(lf, cols = -country, names_to = "year", values_to = "life_expectancy")
lf_long$year <- as.numeric(lf_long$year)
data <- merge(data, lf_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# Fusionar taules Superficie
data_sup <- read.csv(paste(base,"API_AG.SRF.TOTL.K2_DS2_en_csv_v2_485863.csv", sep = "/"), sep = ",", header = FALSE)
data_sup <- tail(data_sup, -2)
head(data_sup)
colnames(data_sup) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
sup <- data_sup[, c("country", 1960:2021)]
sup_long <- pivot_longer(sup, cols = -country, names_to = "year", values_to = "superficie")
sup_long$year <- as.numeric(sup_long$year)
data <- merge(data, sup_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
data[is.na(data)] <- 0
data$densitat_de_poblacio <- ifelse(data$superficie == 0, 0, data$population / data$superficie)
data_gdp <- data %>%
filter(gdp != 0 & gdp < 3e+13 & co2 != 0)
# Función para generar el gráfico para un año específico
generate_plot <- function(year_selected) {
data_selected <- data_gdp %>%
filter(year == year_selected)
gdp_plot <- ggplot(data_selected, aes(x = gdp, y = co2)) +
geom_point(aes(text = country)) +
geom_smooth(se = TRUE, color = "blue", fill = "blue") +
labs(title = paste("Relació del PIB amb l'emissió de CO2 al", year_selected),
x = "PIB ($)", y = "CO2 (Kt)", text = "Country")
return(gdp_plot)
}
# Lista de años únicos en los datos
years <- unique(data_gdp$year)
# Construye un gráfico interactivo con menú desplegable para elegir el año
gdp_interactivo <- plot_ly()
for (year_selected in years) {
gdp_plot <- generate_plot(year_selected)
gdp_interactivo <- subplot(gdp_interactivo, ggplotly(gdp_plot, tooltip = "text"), nrows = length(years), margin = 0)
}
library(tidyverse)
library(mongolite)
library(ggplot2)
library(gganimate)
library(ggthemes)
# --------------------------------------------------------------------------------------------------------------------------------------------
# Read the CSV file
base <- "C:/Users/34619/Desktop/Enginyeria de Dades/3r/2n semestre/Visualització de Dades/Projecte VD/PROJECTE-VISUALITZACI-"
#base <- "/Users/marioamadorhurtado/Desktop/CARRERA/3r/2ns/VISUALITZACIÓ DE DADES/PROJECTE/PROJECTE-VISUALITZACI-"
#base <- "C:/Users/Usuario/OneDrive/Escriptori/UAB/3r/2nsemestre/visualització/PROJECTE-VISUALITZACI-"
setwd(base)
data <- read.csv(paste(base, "owid-co2-data.csv", sep = "/"))
# Select the important columns
data <- data %>%
select(country, year, population, gdp, co2,
co2_per_capita, methane, methane_per_capita,
nitrous_oxide, nitrous_oxide_per_capita)
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules EXPORTS
data_exports <- read.csv(paste(base, "API_NE.EXP.GNFS.CD_DS2_en_csv_v2_3025.csv", sep  = "/"), sep  = ",", header = FALSE)
data_exports <- tail(data_exports, -2)
colnames(data_exports) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
exports <- data_exports[, c("country", 1960:2021)]
exports_long <- pivot_longer(exports, cols = -country, names_to = "year", values_to = "exports")
exports_long$year <- as.numeric(exports_long$year)
data <- merge(data, exports_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules GINI
data_gini <- read.csv(paste(base, "API_SI.POV.GINI_DS2_en_csv_v2_16.csv", sep  = "/"), sep = ",", header = FALSE)
data_gini <- tail(data_gini, -2)
head(data_gini)
colnames(data_gini) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
gini <- data_gini[, c("country", 1960:2021)]
gini_long <- pivot_longer(gini, cols = -country, names_to = "year", values_to = "gini")
gini_long$year <- as.numeric(gini_long$year)
data <- merge(data, gini_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules LIFE EXPECTANCY
data_lf <- read.csv(paste(base,"API_SP.DYN.LE00.IN_DS2_en_csv_v2_107.csv", sep = "/"), sep = ",", header = FALSE)
data_lf <- tail(data_lf, -2)
head(data_lf)
colnames(data_lf) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
lf <- data_lf[, c("country", 1960:2021)]
lf_long <- pivot_longer(lf, cols = -country, names_to = "year", values_to = "life_expectancy")
lf_long$year <- as.numeric(lf_long$year)
data <- merge(data, lf_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# Fusionar taules Superficie
data_sup <- read.csv(paste(base,"API_AG.SRF.TOTL.K2_DS2_en_csv_v2_485863.csv", sep = "/"), sep = ",", header = FALSE)
data_sup <- tail(data_sup, -2)
head(data_sup)
colnames(data_sup) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
sup <- data_sup[, c("country", 1960:2021)]
sup_long <- pivot_longer(sup, cols = -country, names_to = "year", values_to = "superficie")
sup_long$year <- as.numeric(sup_long$year)
data <- merge(data, sup_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
data[is.na(data)] <- 0
data$densitat_de_poblacio <- ifelse(data$superficie == 0, 0, data$population / data$superficie)
# Datos originales
data_gdp <- data %>%
filter(gdp != 0 & gdp < 3e+13 & co2 != 0)
# Función para generar el gráfico para un año específico
generate_plot <- function(year_selected) {
data_selected <- data_gdp %>%
filter(year == year_selected)
gdp_plot <- ggplot(data_selected, aes(x = gdp, y = co2, text = country)) +
geom_point() +
geom_smooth(method = "loess", se = TRUE, color = "blue", fill = "blue", aes(group = 1)) +
labs(title = paste("Relación del PIB con la emisión de CO2 al", year_selected),
x = "PIB ($)", y = "CO2 (Kt)", text = "Country")
return(gdp_plot)
}
# Lista de años únicos en los datos
years <- unique(data_gdp$year)
# Construye un gráfico interactivo con menú desplegable para elegir el año
gdp_interactivo <- plot_ly()
for (year_selected in years) {
gdp_plot <- generate_plot(year_selected)
gdp_interactivo <- add_trace(gdp_interactivo, ggplotly(gdp_plot), row = year_selected - min(years) + 1)
}
gdp_interactivo <- layout(gdp_interactivo, title = "Selecciona un año:", xaxis = list(domain = c(0, 1), type = "linear"), showlegend = FALSE)
gdp_interactivo
library(tidyverse)
library(mongolite)
library(ggplot2)
library(gganimate)
library(ggthemes)
# --------------------------------------------------------------------------------------------------------------------------------------------
# Read the CSV file
base <- "C:/Users/34619/Desktop/Enginyeria de Dades/3r/2n semestre/Visualització de Dades/Projecte VD/PROJECTE-VISUALITZACI-"
#base <- "/Users/marioamadorhurtado/Desktop/CARRERA/3r/2ns/VISUALITZACIÓ DE DADES/PROJECTE/PROJECTE-VISUALITZACI-"
#base <- "C:/Users/Usuario/OneDrive/Escriptori/UAB/3r/2nsemestre/visualització/PROJECTE-VISUALITZACI-"
setwd(base)
data <- read.csv(paste(base, "owid-co2-data.csv", sep = "/"))
# Select the important columns
data <- data %>%
select(country, year, population, gdp, co2,
co2_per_capita, methane, methane_per_capita,
nitrous_oxide, nitrous_oxide_per_capita)
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules EXPORTS
data_exports <- read.csv(paste(base, "API_NE.EXP.GNFS.CD_DS2_en_csv_v2_3025.csv", sep  = "/"), sep  = ",", header = FALSE)
data_exports <- tail(data_exports, -2)
colnames(data_exports) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
exports <- data_exports[, c("country", 1960:2021)]
exports_long <- pivot_longer(exports, cols = -country, names_to = "year", values_to = "exports")
exports_long$year <- as.numeric(exports_long$year)
data <- merge(data, exports_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules GINI
data_gini <- read.csv(paste(base, "API_SI.POV.GINI_DS2_en_csv_v2_16.csv", sep  = "/"), sep = ",", header = FALSE)
data_gini <- tail(data_gini, -2)
head(data_gini)
colnames(data_gini) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
gini <- data_gini[, c("country", 1960:2021)]
gini_long <- pivot_longer(gini, cols = -country, names_to = "year", values_to = "gini")
gini_long$year <- as.numeric(gini_long$year)
data <- merge(data, gini_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# --------------------------------------------------------------------------------------------------------------------------------------------
# Fusionar taules LIFE EXPECTANCY
data_lf <- read.csv(paste(base,"API_SP.DYN.LE00.IN_DS2_en_csv_v2_107.csv", sep = "/"), sep = ",", header = FALSE)
data_lf <- tail(data_lf, -2)
head(data_lf)
colnames(data_lf) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
lf <- data_lf[, c("country", 1960:2021)]
lf_long <- pivot_longer(lf, cols = -country, names_to = "year", values_to = "life_expectancy")
lf_long$year <- as.numeric(lf_long$year)
data <- merge(data, lf_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
# Fusionar taules Superficie
data_sup <- read.csv(paste(base,"API_AG.SRF.TOTL.K2_DS2_en_csv_v2_485863.csv", sep = "/"), sep = ",", header = FALSE)
data_sup <- tail(data_sup, -2)
head(data_sup)
colnames(data_sup) <- c("country", "code", "indicator_name", "indicator_code", 1960:2021)  # Renombrar las columnas
sup <- data_sup[, c("country", 1960:2021)]
sup_long <- pivot_longer(sup, cols = -country, names_to = "year", values_to = "superficie")
sup_long$year <- as.numeric(sup_long$year)
data <- merge(data, sup_long, by = c("country", "year"), all.x = TRUE)
data <- data[, c(1:3, 5:ncol(data), 4)]
data[is.na(data)] <- 0
data$densitat_de_poblacio <- ifelse(data$superficie == 0, 0, data$population / data$superficie)
# Datos originales
data_gdp <- data %>%
filter(gdp != 0 & gdp < 3e+13 & co2 != 0)
# Función para generar el gráfico para un año específico
generate_plot <- function(year_selected) {
data_selected <- data_gdp %>%
filter(year == year_selected)
gdp_plot <- ggplot(data_selected, aes(x = gdp, y = co2, text = country)) +
geom_point() +
geom_smooth(method = "loess", se = TRUE, color = "blue", fill = "blue", aes(group = 1)) +
labs(title = paste("Relación del PIB con la emisión de CO2 al", year_selected),
x = "PIB ($)", y = "CO2 (Kt)", text = "Country")
return(gdp_plot)
}
# Lista de años únicos en los datos
years <- unique(data_gdp$year)
# Construye un gráfico interactivo con menú desplegable para elegir el año
gdp_interactivo <- plot_ly()
for (year_selected in years) {
gdp_plot <- generate_plot(year_selected)
gdp_interactivo <- add_trace(gdp_interactivo, ggplotly(gdp_plot), row = year_selected - min(years) + 1, mode = "markers")
}
gdp_interactivo <- layout(gdp_interactivo, title = "Selecciona un año:", xaxis = list(domain = c(0, 1), type = "linear"), showlegend = FALSE)
gdp_interactivo
